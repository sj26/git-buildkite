#!/bin/bash

VERSION="v0.6.0"

BUILDKITE_ORGANIZATION="${BUILDKITE_ORGANIZATION:-$(git config buildkite.organization)}"

if [[ -z "$BUILDKITE_ORGANIZATION" && -n "$BUILDKITE_ACCOUNT" ]]; then
  BUILDKITE_ORGANIZATION="$BUILDKITE_ACCOUNT"

  echo "Warning: \$BUILDKITE_ACCOUNT is deprecated, please use \$BUILDKITE_ORGANIZATION"
  echo
fi

if [[ -z "$BUILDKITE_ORGANIZATION" && -n "$(git config buildkite.account)" ]]; then
  BUILDKITE_ORGANIZATION="$(git config buildkite.account)"

  echo "Warning: Using buildkite.account in your Git config is deprecated, please use buildkite.organization:"
  echo
  echo "  git config --local buildkite.organization $(printf "%q" "$BUILDKITE_ORGANIZATION")"
  echo "  git config --unset buildkite.account"
  echo
fi

BUILDKITE_API_KEY="${BUILDKITE_API_KEY:-$(git config buildkite.apikey)}"

# Store your API key in your macOS keychain:
if [[ -z "$BUILDKITE_API_KEY" ]] && which security >/dev/null 2>&1; then
  # Try a per-org token first:
  #   security add-generic-password -s api.buildkite.com/v2/organizations/YOUR-ORGANIZATION -a YOUR-USERNAME -w
  BUILDKITE_API_KEY="${BUILDKITE_API_KEY:-$(security find-generic-password -s "api.buildkite.com/v2/organizations/${BUILDKITE_ORGANIZATION}" -w 2>/dev/null)}"

  # Fall back to a global token:
  #   security add-generic-password -s api.buildkite.com -a YOUR-USERNAME -w
  if [[ -z "$BUILDKITE_API_KEY" ]]; then
    BUILDKITE_API_KEY="${BUILDKITE_API_KEY:-$(security find-generic-password -s api.buildkite.com -w 2>/dev/null)}"
  fi
fi

# Store your API key in your keyring:
#   pip install keyring
if [[ -z "$BUILDKITE_API_KEY" ]] && which keyring > /dev/null 2>&1; then
  # Try a per-org token first:
  #   keyring set "api.buildkite.com/v2/organizations/${BUILDKITE_ORGANIZATION}" "$USER"
  if [[ -z "$BUILDKITE_API_KEY" ]] && which keyring > /dev/null 2>&1; then
    BUILDKITE_API_KEY="$(keyring get "api.buildkite.com/v2/organizations/${BUILDKITE_ORGANIZATION}" "$USER")"
  fi

  # Fall back to a global token:
  #   keyring set api.buildkite.com "$USER"
  BUILDKITE_API_KEY="$(keyring get api.buildkite.com "$USER")"
fi

BUILDKITE_PIPELINE="${BUILDKITE_PIPELINE:-$(git config buildkite.pipeline)}"

if [[ -z "$BUILDKITE_PIPELINE" && -n "$BUILDKITE_PROJECT" ]]; then
  BUILDKITE_PIPELINE="$BUILDKITE_PROJECT"

  echo "Warning: \$BUILDKITE_PROJECT is deprecated, please use \$BUILDKITE_PIPELINE"
  echo
fi

if [[ -z "$BUILDKITE_PIPELINE" && -n "$(git config buildkite.project)" ]]; then
  BUILDKITE_PIPELINE="$(git config buildkite.project)"

  echo "Warning: Using buildkite.project in your Git config is deprecated, please use buildkite.pipeline:"
  echo
  echo "  git config --local buildkite.pipeline $(printf "%q" "$BUILDKITE_PIPELINE")"
  echo "  git config --unset buildkite.project"
  echo
fi

function current_revision() {
  git rev-parse HEAD
}

function current_branch() {
  if [[ -f .git/rebase-merge/head-name ]]; then
    # We're rebasing, use the rebased head's name (without refs/heads/ prefix)
    echo "$(head="$(cat .git/rebase-merge/head-name)"; echo "${head#refs/heads/}")"
  else
    # Let git read the HEAD for a symbolic ref (the current branch)
    git symbolic-ref --short HEAD 2> /dev/null
  fi
}

function current_branch_exists() {
  [ "$(current_branch)" ]
}

function remote_upstream_branch() {
  git rev-parse --symbolic-full-name --abbrev-ref @{u} 2> /dev/null
}

function upstream_branch() {
  remote_and_branch=$(remote_upstream_branch)
  branch="${remote_and_branch#*/}"
  echo "$branch"
}

function upstream_branch_exists() {
  [ "$(upstream_branch)" ]
}

function remote_current_branch() {
  [ "$(current_branch)" ] && echo "origin/$(current_branch)"
}

function remote_current_branch_revision() {
  [ "$(remote_current_branch)" ] &&
    git rev-parse --short "$(remote_current_branch)"
}

function remote_current_branch_current() {
  [ "$(remote_current_branch)" ] &&
    git rev-parse --verify --quiet "$(remote_current_branch)" > /dev/null &&
    [ "$(git rev-parse "$(current_branch)")" == "$(git rev-parse "$(remote_current_branch)")" ]
}

function remote_current_branch_behind() {
  [ "$(remote_current_branch)" ] &&
    git rev-parse --verify --quiet "$(remote_current_branch)" > /dev/null &&
    git merge-base --is-ancestor "$(remote_current_branch)" "$(current_branch)"
}

function confirm() {
  read -p "$1 [Y/n] " -n 1 -r
  echo
  [[ "$REPLY" =~ ^[Yy]$ || "$REPLY" == "" ]]
}

function current_head_on_remote() {
  [ -z "$(git rev-list $1..$(current_revision))" ]
}

function current_head_dirty() {
  [ "$(git status --short)" ]
}

function build() {
  # XXX: There seems no nice way to make curl give us a non-zero
  # status code and the response body on error, so we have to check
  # the content for errors later.
  curl -# "https://api.buildkite.com/v2/organizations/${BUILDKITE_ORGANIZATION}/pipelines/${BUILDKITE_PIPELINE}/builds" \
    -A "git-buildkite/${VERSION}" \
    -H "Authorization: Bearer ${BUILDKITE_API_KEY}" \
    -X POST \
    -F "branch=$1" \
    -F "commit=$2" \
    -F "message=$(git log --format=%B -n 1 "$2")" \
    -F "ignore_pipeline_branch_filters=true" \
    -F "meta_data[personal]=true" \
    -F "meta_data[user_name]=$(git config user.name)" \
    -F "meta_data[user_email]=$(git config user.email)"
}

function result_error() {
  [[ -z "$(result_build_url "$1")" ]]
}

function result_api_key_error() {
  grep -q api_key <<< "$1"
}

function result_build_url() {
  ruby -rjson -e 'print JSON.parse(STDIN.read)["web_url"].to_s rescue ""' <<< "$1"
}

if [ -z "$BUILDKITE_API_KEY" ]; then
  echo "You need to create a new Buildkite api key with the 'Modify Builds (write_builds)' scope. You can do that here:"
  echo
  echo "    https://buildkite.com/user/api-access-tokens"
  echo
  echo "Then stick it in git:"
  echo
  echo "    git config --global buildkite.apikey <KEY>"
  echo

  exit 1
fi

if [ -z "$BUILDKITE_ORGANIZATION" -o -z "$BUILDKITE_PIPELINE" ]; then
  echo "You need to configure your Buildkite organization and pipeline name. They're in the URL when you visit your pipeline page. For example:"
  echo
  echo "    https://buildkite.com/mycompany/mypipeline"
  echo
  echo "corresponds an organization named \"mycompany\" and pipeline named \"mypipeline\". Then stick it in git:"
  echo
  echo "    git config --local buildkite.organization \"mycompany\""
  echo "    git config --local buildkite.pipeline \"mypipeline\""
  echo

  exit 1
fi

# Parse flags before parsing arguments
let i=1
while [[ $i -le $# ]]; do
  case "${!i}" in
    "--browse")
      browse=yes
      shift $i
  esac
  let i=i+1
done

if [[ "$#" -eq 0 ]]; then
  if ! current_branch_exists; then
    echo "Woops, you don't seem to be on a branch." >&2
    echo
    echo "Try:"
    echo
    echo "    git checkout -b my_branch HEAD"
    echo
    echo "And make sure you push it first:"
    echo
    echo "    git push --set-upstream origin my_branch"
    echo

    exit 1
  fi

  if upstream_branch_exists; then
    echo "$(current_branch) exists on origin as $(upstream_branch)"
    echo

    BUILDKITE_BRANCH="$(upstream_branch)"
  else
    if remote_current_branch_current; then
      echo "$(current_branch) also exists on origin at the same commit, I'll assume that's what we're building."
      echo

      BUILDKITE_BRANCH="$(current_branch)"
    elif remote_current_branch_behind; then
      echo "$(current_branch) also exists on origin, but it's at an earlier commit:"
      echo
      echo "    $(git show --oneline --no-patch $(remote_current_branch_revision))"
      echo
      echo "This will only work if the commit is in another ref on origin."
      echo

      if confirm "Do you want to try anyway?"; then
        echo
        echo "Yeah, I trust you."
        echo

        BUILDKITE_BRANCH="$(current_branch)"
      else
        echo
        echo "Cautious player, I like that."
        echo
        echo "Try pushing your branch first:"
        echo
        echo "    git push origin $(current_branch)"
        echo
        exit 1
      fi
    else
      echo "Woops, I can't figure out what this branch is called on origin."
      echo
      echo "Have you pushed it? Try:"
      echo
      echo "    git push --set-upstream origin $(current_branch)"
      echo
      echo "Otherwise maybe you just need to set the upstream for this branch:"
      echo
      echo "    git branch --set-upstream-to origin/$(current_branch)"
      echo

      exit 1
    fi
  fi

  if ! current_head_on_remote $BUILDKITE_BRANCH; then
    echo "Woops, I can't see this commit on origin."
    echo
    echo "Have you pushed it? Try:"
    echo
    echo "    git push --set-upstream origin $(current_branch)"
    echo

    if confirm "Do you want to try anyway?"; then
      echo
      echo "Yeah, let's do this."
      echo
    else
      echo
      echo "Okay, let me know when you're ready!"
      echo
      exit 1
    fi
  fi

  if current_head_dirty; then
    echo "Woops, it looks like your working tree is dirty:"
    echo
    git status
    echo
    echo "If you want to build with these changes you should commit and push them first."
    echo

    if confirm "Do you want to try anyway?"; then
      echo
      echo "Yeah, let's do this."
      echo
    else
      echo
      echo "Okay, let me know when you're ready!"
      echo
      exit 1
    fi
  fi

  BUILDKITE_COMMIT="$(current_revision)"

elif [[ "$#" -eq 1 ]]; then
  # git buildkite <branch>

  BUILDKITE_BRANCH="$1"

  BUILDKITE_COMMIT="$(git rev-parse "$BUILDKITE_BRANCH")" || ( echo "Woops, I can't figure out what commit to build from that branch"; exit 1 )

elif [[ "$#" -eq 2 ]]; then
  # git buildkite <branch> <commit>

  if [[ "$1" == "HEAD" || "$1" == "@" ]]; then
    # "@" or "HEAD" are aliases for building the current branch at a specified commit.
    BUILDKITE_BRANCH="$(current_branch)"

    if ! current_branch_exists; then
      echo "Woops, you don't seem to be on a branch." >&2
      echo
      echo "Try:"
      echo
      echo "    git checkout -b my_branch HEAD"
      echo
      echo "And make sure you push it first:"
      echo
      echo "    git push --set-upstream origin my_branch"
      echo

      exit 1
    fi
  else
    BUILDKITE_BRANCH="$1"
  fi

  # rev-parse the commit so we can do things like HEAD~2 or :/history
  BUILDKITE_COMMIT="$(git rev-parse "$2")"
else
  echo "Usage: git buildkite [branch [commit]]"
fi

echo "Starting a build for $BUILDKITE_BRANCH at $BUILDKITE_COMMIT"

result="$(build "$BUILDKITE_BRANCH" "$BUILDKITE_COMMIT")"

if result_error "$result"; then
  echo
  echo "Woops, Buildkite didn't like that:"
  echo
  echo "$result"
  echo

  if result_api_key_error "$result"; then
    echo "Sounds like it might be your API key Check it out:"
    echo
    echo "    https://buildkite.com/user/api-access-tokens"
    echo
    echo "Here's what we've got:"
    echo
    echo "    $BUILDKITE_API_KEY"
    echo
    echo "Change it with:"
    echo
    echo "    git config --global buildkite.apikey <KEY>"
    echo
  fi

  exit 1
fi

build_url="$(result_build_url "$result")"

echo
echo "Success! Watch it go:"
echo
echo "    ${build_url}"
echo

# Open a browser if we can
if [[ -n "$browse" ]]; then
  if which open >/dev/null 2>&1; then
    open "${build_url}"
  elif which xdg-open >/dev/null 2>&1; then
    xdg-open "${build_url}"
  else
    echo "Sorry but I don't know how to open your browser! Copy and paste the link above as you like."
  fi
fi
